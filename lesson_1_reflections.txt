How did viewing a diff between two versions of a file help you see the bug that was introduced?

You see all changes and so you only have to check the changed lines.


How could having easy access to the entire history of a file make you a more efficient programmer in the long term?

nobody can remember what you've done after two weeks or so... with a history you can go back in time.

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?

pros: you get well defined commits
cons: you need to think ;-), you don't get every step.

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?

A good commit size is considered to be a logical change and to not break these style we need to include more than one file in a commit. So that all changes, across multiple files, are covered in the commit.

How can you use the commands git log and git diff to view the history of files?

git log shows the messages and dates of all commits, starting with the latest. There are also the commit ids. Two commit ids can be used to compare changes between versions.

How might using version control make you more confident to make changes that could break something?

When you follow the rule to commit every logical change, you can easily try things out and commit. If it doesn't work you can go back without any problem. That means there is no more fear to break or loose something.

Now that you have your workspace set up, what do you want to try using Git for?

I want to use it for my own projects and try to be a better programmer.
